-- Transaction table following SAMA Open Banking transaction structure
-- Supports comprehensive transaction data with categorization and receipt handling
CREATE TABLE Transaction (
    transactionId TEXT NOT NULL PRIMARY KEY,
    accountId TEXT NOT NULL,
    bankCode TEXT NOT NULL,
    
    -- Basic transaction data
    amount TEXT NOT NULL,
    currency TEXT NOT NULL DEFAULT 'SAR',
    transactionType TEXT NOT NULL, -- DEBIT, CREDIT
    status TEXT NOT NULL DEFAULT 'COMPLETED',
    
    -- Transaction details
    description TEXT,
    merchantName TEXT,
    merchantCategory TEXT,
    reference TEXT,
    
    -- Dates and timing
    transactionDate INTEGER NOT NULL,
    bookingDate INTEGER,
    valueDate INTEGER,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL,
    
    -- Categorization
    categoryId TEXT,
    categoryName TEXT,
    subcategoryName TEXT,
    isRecurring INTEGER NOT NULL DEFAULT 0,
    recurringGroupId TEXT,
    
    -- Location data
    locationLatitude REAL,
    locationLongitude REAL,
    locationName TEXT,
    
    -- Receipt and attachments
    receiptImagePath TEXT,
    receiptData TEXT, -- JSON for OCR extracted data
    hasReceipt INTEGER NOT NULL DEFAULT 0,
    
    -- Additional metadata
    originalAmount TEXT, -- For currency conversions
    originalCurrency TEXT,
    exchangeRate TEXT,
    
    -- Banking specific fields
    bankTransactionCode TEXT,
    purposeCode TEXT,
    proprietaryBankTransactionCode TEXT,
    
    -- Balance after transaction
    runningBalance TEXT,
    
    -- Sync and processing flags
    isProcessed INTEGER NOT NULL DEFAULT 1,
    isSynced INTEGER NOT NULL DEFAULT 0,
    syncedAt INTEGER,
    
    -- JSON metadata for extensibility
    metadata TEXT DEFAULT '{}',
    
    FOREIGN KEY (accountId) REFERENCES Account(accountId) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_transaction_account ON Transaction(accountId);
CREATE INDEX idx_transaction_date ON Transaction(transactionDate DESC);
CREATE INDEX idx_transaction_type ON Transaction(transactionType);
CREATE INDEX idx_transaction_status ON Transaction(status);
CREATE INDEX idx_transaction_category ON Transaction(categoryId);
CREATE INDEX idx_transaction_merchant ON Transaction(merchantName);
CREATE INDEX idx_transaction_sync ON Transaction(isSynced, syncedAt);
CREATE INDEX idx_transaction_recurring ON Transaction(recurringGroupId);
CREATE INDEX idx_transaction_booking_date ON Transaction(bookingDate DESC);

-- Composite indexes for common query patterns
CREATE INDEX idx_transaction_account_date ON Transaction(accountId, transactionDate DESC);
CREATE INDEX idx_transaction_account_category ON Transaction(accountId, categoryId);
CREATE INDEX idx_transaction_date_range ON Transaction(transactionDate, bookingDate);

-- Transaction queries
selectAll:
SELECT * FROM Transaction ORDER BY transactionDate DESC;

selectByAccount:
SELECT * FROM Transaction 
WHERE accountId = ? 
ORDER BY transactionDate DESC;

selectByAccountPaginated:
SELECT * FROM Transaction 
WHERE accountId = ? 
ORDER BY transactionDate DESC 
LIMIT ? OFFSET ?;

selectByDateRange:
SELECT * FROM Transaction 
WHERE transactionDate BETWEEN ? AND ? 
ORDER BY transactionDate DESC;

selectByAccountAndDateRange:
SELECT * FROM Transaction 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ? 
ORDER BY transactionDate DESC;

selectById:
SELECT * FROM Transaction WHERE transactionId = ?;

selectByCategory:
SELECT * FROM Transaction 
WHERE categoryId = ? 
ORDER BY transactionDate DESC;

selectByMerchant:
SELECT * FROM Transaction 
WHERE merchantName = ? 
ORDER BY transactionDate DESC;

selectRecurringTransactions:
SELECT * FROM Transaction 
WHERE isRecurring = 1 
ORDER BY transactionDate DESC;

selectByRecurringGroup:
SELECT * FROM Transaction 
WHERE recurringGroupId = ? 
ORDER BY transactionDate DESC;

selectPendingTransactions:
SELECT * FROM Transaction 
WHERE status = 'PENDING' 
ORDER BY transactionDate DESC;

selectRecentTransactions:
SELECT * FROM Transaction 
WHERE transactionDate > ? 
ORDER BY transactionDate DESC 
LIMIT ?;

selectTransactionsWithReceipts:
SELECT * FROM Transaction 
WHERE hasReceipt = 1 
ORDER BY transactionDate DESC;

selectUnsyncedTransactions:
SELECT * FROM Transaction 
WHERE isSynced = 0 
ORDER BY transactionDate DESC;

selectTransactionsNeedingProcessing:
SELECT * FROM Transaction 
WHERE isProcessed = 0 
ORDER BY transactionDate ASC;

-- Search queries
searchTransactions:
SELECT * FROM Transaction 
WHERE (description LIKE '%' || ? || '%' 
    OR merchantName LIKE '%' || ? || '%'
    OR reference LIKE '%' || ? || '%')
ORDER BY transactionDate DESC;

searchByAmount:
SELECT * FROM Transaction 
WHERE CAST(amount AS REAL) BETWEEN ? AND ?
ORDER BY transactionDate DESC;

-- Analytics queries
selectTransactionsByCategory:
SELECT 
    categoryId,
    categoryName,
    COUNT(*) as transactionCount,
    SUM(CAST(amount AS REAL)) as totalAmount,
    AVG(CAST(amount AS REAL)) as averageAmount
FROM Transaction 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
    AND transactionType = ?
GROUP BY categoryId, categoryName
ORDER BY totalAmount DESC;

selectTransactionsByMerchant:
SELECT 
    merchantName,
    merchantCategory,
    COUNT(*) as transactionCount,
    SUM(CAST(amount AS REAL)) as totalAmount,
    MAX(transactionDate) as lastTransactionDate
FROM Transaction 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
GROUP BY merchantName, merchantCategory
ORDER BY totalAmount DESC;

selectMonthlySpending:
SELECT 
    strftime('%Y-%m', datetime(transactionDate, 'unixepoch')) as month,
    SUM(CASE WHEN transactionType = 'DEBIT' THEN CAST(amount AS REAL) ELSE 0 END) as totalSpent,
    SUM(CASE WHEN transactionType = 'CREDIT' THEN CAST(amount AS REAL) ELSE 0 END) as totalReceived,
    COUNT(*) as transactionCount
FROM Transaction 
WHERE accountId = ? 
GROUP BY month
ORDER BY month DESC;

selectDailyTransactionSummary:
SELECT 
    DATE(transactionDate, 'unixepoch') as date,
    COUNT(*) as transactionCount,
    SUM(CASE WHEN transactionType = 'DEBIT' THEN CAST(amount AS REAL) ELSE 0 END) as totalSpent,
    SUM(CASE WHEN transactionType = 'CREDIT' THEN CAST(amount AS REAL) ELSE 0 END) as totalReceived
FROM Transaction 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
GROUP BY date
ORDER BY date DESC;

-- Insert and update operations
insertTransaction:
INSERT INTO Transaction (
    transactionId, accountId, bankCode, amount, currency, transactionType, status,
    description, merchantName, merchantCategory, reference,
    transactionDate, bookingDate, valueDate, createdAt, updatedAt,
    categoryId, categoryName, subcategoryName, isRecurring, recurringGroupId,
    locationLatitude, locationLongitude, locationName,
    receiptImagePath, receiptData, hasReceipt,
    originalAmount, originalCurrency, exchangeRate,
    bankTransactionCode, purposeCode, proprietaryBankTransactionCode,
    runningBalance, isProcessed, isSynced, syncedAt, metadata
) VALUES (
    ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?,
    ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?, ?, ?
);

updateTransaction:
UPDATE Transaction SET
    amount = ?,
    currency = ?,
    transactionType = ?,
    status = ?,
    description = ?,
    merchantName = ?,
    merchantCategory = ?,
    reference = ?,
    bookingDate = ?,
    valueDate = ?,
    updatedAt = ?,
    categoryId = ?,
    categoryName = ?,
    subcategoryName = ?,
    isRecurring = ?,
    recurringGroupId = ?,
    locationLatitude = ?,
    locationLongitude = ?,
    locationName = ?,
    receiptImagePath = ?,
    receiptData = ?,
    hasReceipt = ?,
    runningBalance = ?,
    isProcessed = ?,
    metadata = ?
WHERE transactionId = ?;

updateCategory:
UPDATE Transaction SET
    categoryId = ?,
    categoryName = ?,
    subcategoryName = ?,
    updatedAt = ?
WHERE transactionId = ?;

updateSyncStatus:
UPDATE Transaction SET
    isSynced = ?,
    syncedAt = ?,
    updatedAt = ?
WHERE transactionId = ?;

updateReceipt:
UPDATE Transaction SET
    receiptImagePath = ?,
    receiptData = ?,
    hasReceipt = ?,
    updatedAt = ?
WHERE transactionId = ?;

markAsProcessed:
UPDATE Transaction SET
    isProcessed = 1,
    updatedAt = ?
WHERE transactionId = ?;

-- Delete operations
deleteTransaction:
DELETE FROM Transaction WHERE transactionId = ?;

deleteByAccount:
DELETE FROM Transaction WHERE accountId = ?;

deleteOlderThan:
DELETE FROM Transaction WHERE transactionDate < ?;

-- Utility queries
countTransactions:
SELECT COUNT(*) FROM Transaction;

countTransactionsByAccount:
SELECT COUNT(*) FROM Transaction WHERE accountId = ?;

countTransactionsByDateRange:
SELECT COUNT(*) FROM Transaction 
WHERE transactionDate BETWEEN ? AND ?;

getAccountBalance:
SELECT runningBalance 
FROM Transaction 
WHERE accountId = ? 
ORDER BY transactionDate DESC, createdAt DESC 
LIMIT 1;

getLastTransactionDate:
SELECT MAX(transactionDate) 
FROM Transaction 
WHERE accountId = ?;