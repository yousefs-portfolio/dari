-- TransactionRecord table following SAMA Open Banking transaction structure
-- Supports comprehensive transaction data with categorization and receipt handling
CREATE TABLE TransactionRecord (
    transactionId TEXT NOT NULL PRIMARY KEY,
    accountId TEXT NOT NULL,
    bankCode TEXT NOT NULL,
    
    -- Basic transaction data
    amount TEXT NOT NULL,
    currency TEXT NOT NULL DEFAULT 'SAR',
    transactionType TEXT NOT NULL, -- DEBIT, CREDIT
    status TEXT NOT NULL DEFAULT 'COMPLETED',
    
    -- TransactionRecord details
    description TEXT,
    merchantName TEXT,
    merchantCategory TEXT,
    reference TEXT,
    
    -- Dates and timing
    transactionDate INTEGER NOT NULL,
    bookingDate INTEGER,
    valueDate INTEGER,
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL,
    
    -- Categorization
    categoryId TEXT,
    categoryName TEXT,
    subcategoryName TEXT,
    isRecurring INTEGER NOT NULL DEFAULT 0,
    recurringGroupId TEXT,
    
    -- Location data
    locationLatitude REAL,
    locationLongitude REAL,
    locationName TEXT,
    
    -- Receipt and attachments
    receiptImagePath TEXT,
    receiptData TEXT, -- JSON for OCR extracted data
    hasReceipt INTEGER NOT NULL DEFAULT 0,
    
    -- Additional metadata
    originalAmount TEXT, -- For currency conversions
    originalCurrency TEXT,
    exchangeRate TEXT,
    
    -- Banking specific fields
    bankTransactionRecordCode TEXT,
    purposeCode TEXT,
    proprietaryBankTransactionRecordCode TEXT,
    
    -- Balance after transaction
    runningBalance TEXT,
    
    -- Sync and processing flags
    isProcessed INTEGER NOT NULL DEFAULT 1,
    isSynced INTEGER NOT NULL DEFAULT 0,
    syncedAt INTEGER,
    
    -- JSON metadata for extensibility
    metadata TEXT DEFAULT '{}',
    
    FOREIGN KEY (accountId) REFERENCES Account(accountId) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_transaction_account ON TransactionRecord(accountId);
CREATE INDEX idx_transaction_date ON TransactionRecord(transactionDate DESC);
CREATE INDEX idx_transaction_type ON TransactionRecord(transactionType);
CREATE INDEX idx_transaction_status ON TransactionRecord(status);
CREATE INDEX idx_transaction_category ON TransactionRecord(categoryId);
CREATE INDEX idx_transaction_merchant ON TransactionRecord(merchantName);
CREATE INDEX idx_transaction_sync ON TransactionRecord(isSynced, syncedAt);
CREATE INDEX idx_transaction_recurring ON TransactionRecord(recurringGroupId);
CREATE INDEX idx_transaction_booking_date ON TransactionRecord(bookingDate DESC);

-- Composite indexes for common query patterns
CREATE INDEX idx_transaction_account_date ON TransactionRecord(accountId, transactionDate DESC);
CREATE INDEX idx_transaction_account_category ON TransactionRecord(accountId, categoryId);
CREATE INDEX idx_transaction_date_range ON TransactionRecord(transactionDate, bookingDate);

-- TransactionRecord queries
selectAll:
SELECT * FROM TransactionRecord ORDER BY transactionDate DESC;

selectByAccount:
SELECT * FROM TransactionRecord 
WHERE accountId = ? 
ORDER BY transactionDate DESC;

selectByAccountPaginated:
SELECT * FROM TransactionRecord 
WHERE accountId = ? 
ORDER BY transactionDate DESC 
LIMIT ? OFFSET ?;

selectByDateRange:
SELECT * FROM TransactionRecord 
WHERE transactionDate BETWEEN ? AND ? 
ORDER BY transactionDate DESC;

selectByAccountAndDateRange:
SELECT * FROM TransactionRecord 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ? 
ORDER BY transactionDate DESC;

selectById:
SELECT * FROM TransactionRecord WHERE transactionId = ?;

selectByCategory:
SELECT * FROM TransactionRecord 
WHERE categoryId = ? 
ORDER BY transactionDate DESC;

selectByMerchant:
SELECT * FROM TransactionRecord 
WHERE merchantName = ? 
ORDER BY transactionDate DESC;

selectRecurringTransactionRecords:
SELECT * FROM TransactionRecord 
WHERE isRecurring = 1 
ORDER BY transactionDate DESC;

selectByRecurringGroup:
SELECT * FROM TransactionRecord 
WHERE recurringGroupId = ? 
ORDER BY transactionDate DESC;

selectPendingTransactionRecords:
SELECT * FROM TransactionRecord 
WHERE status = 'PENDING' 
ORDER BY transactionDate DESC;

selectRecentTransactionRecords:
SELECT * FROM TransactionRecord 
WHERE transactionDate > ? 
ORDER BY transactionDate DESC 
LIMIT ?;

selectTransactionRecordsWithReceipts:
SELECT * FROM TransactionRecord 
WHERE hasReceipt = 1 
ORDER BY transactionDate DESC;

selectUnsyncedTransactionRecords:
SELECT * FROM TransactionRecord 
WHERE isSynced = 0 
ORDER BY transactionDate DESC;

selectTransactionRecordsNeedingProcessing:
SELECT * FROM TransactionRecord 
WHERE isProcessed = 0 
ORDER BY transactionDate ASC;

-- Search queries
searchTransactionRecords:
SELECT * FROM TransactionRecord 
WHERE (description LIKE '%' || ? || '%' 
    OR merchantName LIKE '%' || ? || '%'
    OR reference LIKE '%' || ? || '%')
ORDER BY transactionDate DESC;

searchByAmount:
SELECT * FROM TransactionRecord 
WHERE CAST(amount AS REAL) BETWEEN ? AND ?
ORDER BY transactionDate DESC;

-- Analytics queries
selectTransactionRecordsByCategory:
SELECT 
    categoryId,
    categoryName,
    COUNT(*),
    SUM(CAST(amount AS REAL)),
    AVG(CAST(amount AS REAL))
FROM TransactionRecord 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
    AND transactionType = ?
GROUP BY categoryId, categoryName
ORDER BY SUM(CAST(amount AS REAL)) DESC;

selectTransactionRecordsByMerchant:
SELECT 
    merchantName,
    merchantCategory,
    COUNT(*),
    SUM(CAST(amount AS REAL)),
    MAX(transactionDate)
FROM TransactionRecord 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
GROUP BY merchantName, merchantCategory
ORDER BY SUM(CAST(amount AS REAL)) DESC;

selectMonthlySpending:
SELECT 
    strftime('%Y-%m', datetime(transactionDate, 'unixepoch')),
    SUM(CASE WHEN transactionType = 'DEBIT' THEN CAST(amount AS REAL) ELSE 0 END),
    SUM(CASE WHEN transactionType = 'CREDIT' THEN CAST(amount AS REAL) ELSE 0 END),
    COUNT(*)
FROM TransactionRecord 
WHERE accountId = ? 
GROUP BY strftime('%Y-%m', datetime(transactionDate, 'unixepoch'))
ORDER BY strftime('%Y-%m', datetime(transactionDate, 'unixepoch')) DESC;

selectDailyTransactionRecordSummary:
SELECT 
    DATE(transactionDate, 'unixepoch'),
    COUNT(*),
    SUM(CASE WHEN transactionType = 'DEBIT' THEN CAST(amount AS REAL) ELSE 0 END),
    SUM(CASE WHEN transactionType = 'CREDIT' THEN CAST(amount AS REAL) ELSE 0 END)
FROM TransactionRecord 
WHERE accountId = ? 
    AND transactionDate BETWEEN ? AND ?
GROUP BY DATE(transactionDate, 'unixepoch')
ORDER BY DATE(transactionDate, 'unixepoch') DESC;

-- Insert and update operations
insertTransactionRecord:
INSERT INTO TransactionRecord (
    transactionId, accountId, bankCode, amount, currency, transactionType, status,
    description, merchantName, merchantCategory, reference,
    transactionDate, bookingDate, valueDate, createdAt, updatedAt,
    categoryId, categoryName, subcategoryName, isRecurring, recurringGroupId,
    locationLatitude, locationLongitude, locationName,
    receiptImagePath, receiptData, hasReceipt,
    originalAmount, originalCurrency, exchangeRate,
    bankTransactionRecordCode, purposeCode, proprietaryBankTransactionRecordCode,
    runningBalance, isProcessed, isSynced, syncedAt, metadata
) VALUES (
    ?, ?, ?, ?, ?, ?, ?,
    ?, ?, ?, ?,
    ?, ?, ?, ?, ?,
    ?, ?, ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?,
    ?, ?, ?, ?, ?
);

updateTransactionRecord:
UPDATE TransactionRecord SET
    amount = ?,
    currency = ?,
    transactionType = ?,
    status = ?,
    description = ?,
    merchantName = ?,
    merchantCategory = ?,
    reference = ?,
    bookingDate = ?,
    valueDate = ?,
    updatedAt = ?,
    categoryId = ?,
    categoryName = ?,
    subcategoryName = ?,
    isRecurring = ?,
    recurringGroupId = ?,
    locationLatitude = ?,
    locationLongitude = ?,
    locationName = ?,
    receiptImagePath = ?,
    receiptData = ?,
    hasReceipt = ?,
    runningBalance = ?,
    isProcessed = ?,
    metadata = ?
WHERE transactionId = ?;

updateCategory:
UPDATE TransactionRecord SET
    categoryId = ?,
    categoryName = ?,
    subcategoryName = ?,
    updatedAt = ?
WHERE transactionId = ?;

updateSyncStatus:
UPDATE TransactionRecord SET
    isSynced = ?,
    syncedAt = ?,
    updatedAt = ?
WHERE transactionId = ?;

updateReceipt:
UPDATE TransactionRecord SET
    receiptImagePath = ?,
    receiptData = ?,
    hasReceipt = ?,
    updatedAt = ?
WHERE transactionId = ?;

markAsProcessed:
UPDATE TransactionRecord SET
    isProcessed = 1,
    updatedAt = ?
WHERE transactionId = ?;

-- Delete operations
deleteTransactionRecord:
DELETE FROM TransactionRecord WHERE transactionId = ?;

deleteByAccount:
DELETE FROM TransactionRecord WHERE accountId = ?;

deleteOlderThan:
DELETE FROM TransactionRecord WHERE transactionDate < ?;

-- Utility queries
countTransactionRecords:
SELECT COUNT(*) FROM TransactionRecord;

countTransactionRecordsByAccount:
SELECT COUNT(*) FROM TransactionRecord WHERE accountId = ?;

countTransactionRecordsByDateRange:
SELECT COUNT(*) FROM TransactionRecord 
WHERE transactionDate BETWEEN ? AND ?;

getAccountBalance:
SELECT runningBalance 
FROM TransactionRecord 
WHERE accountId = ? 
ORDER BY transactionDate DESC, createdAt DESC 
LIMIT 1;

getLastTransactionRecordDate:
SELECT MAX(transactionDate) 
FROM TransactionRecord 
WHERE accountId = ?;